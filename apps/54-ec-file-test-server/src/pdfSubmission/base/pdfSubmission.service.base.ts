/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PdfSubmission as PrismaPdfSubmission } from "@prisma/client";

export class PdfSubmissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PdfSubmissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pdfSubmission.count(args);
  }

  async pdfSubmissions(
    args: Prisma.PdfSubmissionFindManyArgs
  ): Promise<PrismaPdfSubmission[]> {
    return this.prisma.pdfSubmission.findMany(args);
  }
  async pdfSubmission(
    args: Prisma.PdfSubmissionFindUniqueArgs
  ): Promise<PrismaPdfSubmission | null> {
    return this.prisma.pdfSubmission.findUnique(args);
  }
  async createPdfSubmission(
    args: Prisma.PdfSubmissionCreateArgs
  ): Promise<PrismaPdfSubmission> {
    return this.prisma.pdfSubmission.create(args);
  }
  async updatePdfSubmission(
    args: Prisma.PdfSubmissionUpdateArgs
  ): Promise<PrismaPdfSubmission> {
    return this.prisma.pdfSubmission.update(args);
  }
  async deletePdfSubmission(
    args: Prisma.PdfSubmissionDeleteArgs
  ): Promise<PrismaPdfSubmission> {
    return this.prisma.pdfSubmission.delete(args);
  }
}
