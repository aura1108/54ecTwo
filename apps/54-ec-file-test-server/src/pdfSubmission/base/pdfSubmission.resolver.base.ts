/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PdfSubmission } from "./PdfSubmission";
import { PdfSubmissionCountArgs } from "./PdfSubmissionCountArgs";
import { PdfSubmissionFindManyArgs } from "./PdfSubmissionFindManyArgs";
import { PdfSubmissionFindUniqueArgs } from "./PdfSubmissionFindUniqueArgs";
import { CreatePdfSubmissionArgs } from "./CreatePdfSubmissionArgs";
import { UpdatePdfSubmissionArgs } from "./UpdatePdfSubmissionArgs";
import { DeletePdfSubmissionArgs } from "./DeletePdfSubmissionArgs";
import { PdfSubmissionService } from "../pdfSubmission.service";
@graphql.Resolver(() => PdfSubmission)
export class PdfSubmissionResolverBase {
  constructor(protected readonly service: PdfSubmissionService) {}

  async _pdfSubmissionsMeta(
    @graphql.Args() args: PdfSubmissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PdfSubmission])
  async pdfSubmissions(
    @graphql.Args() args: PdfSubmissionFindManyArgs
  ): Promise<PdfSubmission[]> {
    return this.service.pdfSubmissions(args);
  }

  @graphql.Query(() => PdfSubmission, { nullable: true })
  async pdfSubmission(
    @graphql.Args() args: PdfSubmissionFindUniqueArgs
  ): Promise<PdfSubmission | null> {
    const result = await this.service.pdfSubmission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PdfSubmission)
  async createPdfSubmission(
    @graphql.Args() args: CreatePdfSubmissionArgs
  ): Promise<PdfSubmission> {
    return await this.service.createPdfSubmission({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PdfSubmission)
  async updatePdfSubmission(
    @graphql.Args() args: UpdatePdfSubmissionArgs
  ): Promise<PdfSubmission | null> {
    try {
      return await this.service.updatePdfSubmission({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PdfSubmission)
  async deletePdfSubmission(
    @graphql.Args() args: DeletePdfSubmissionArgs
  ): Promise<PdfSubmission | null> {
    try {
      return await this.service.deletePdfSubmission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
