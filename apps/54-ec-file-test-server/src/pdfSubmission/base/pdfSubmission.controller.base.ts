/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PdfSubmissionService } from "../pdfSubmission.service";
import { PdfSubmissionCreateInput } from "./PdfSubmissionCreateInput";
import { PdfSubmission } from "./PdfSubmission";
import { PdfSubmissionFindManyArgs } from "./PdfSubmissionFindManyArgs";
import { PdfSubmissionWhereUniqueInput } from "./PdfSubmissionWhereUniqueInput";
import { PdfSubmissionUpdateInput } from "./PdfSubmissionUpdateInput";

export class PdfSubmissionControllerBase {
  constructor(protected readonly service: PdfSubmissionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PdfSubmission })
  async createPdfSubmission(
    @common.Body() data: PdfSubmissionCreateInput
  ): Promise<PdfSubmission> {
    return await this.service.createPdfSubmission({
      data: data,
      select: {
        createdAt: true,
        id: true,
        pdf1: true,
        pdf2: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PdfSubmission] })
  @ApiNestedQuery(PdfSubmissionFindManyArgs)
  async pdfSubmissions(
    @common.Req() request: Request
  ): Promise<PdfSubmission[]> {
    const args = plainToClass(PdfSubmissionFindManyArgs, request.query);
    return this.service.pdfSubmissions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        pdf1: true,
        pdf2: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PdfSubmission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pdfSubmission(
    @common.Param() params: PdfSubmissionWhereUniqueInput
  ): Promise<PdfSubmission | null> {
    const result = await this.service.pdfSubmission({
      where: params,
      select: {
        createdAt: true,
        id: true,
        pdf1: true,
        pdf2: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PdfSubmission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePdfSubmission(
    @common.Param() params: PdfSubmissionWhereUniqueInput,
    @common.Body() data: PdfSubmissionUpdateInput
  ): Promise<PdfSubmission | null> {
    try {
      return await this.service.updatePdfSubmission({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          pdf1: true,
          pdf2: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PdfSubmission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePdfSubmission(
    @common.Param() params: PdfSubmissionWhereUniqueInput
  ): Promise<PdfSubmission | null> {
    try {
      return await this.service.deletePdfSubmission({
        where: params,
        select: {
          createdAt: true,
          id: true,
          pdf1: true,
          pdf2: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
